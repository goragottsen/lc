{"version":3,"sources":["Validation/Validation.js","Char/Char.js","App.js","serviceWorker.js","index.js"],"names":["validation","props","message","inputLength","react_default","a","createElement","className","style","color","char","onClick","clicked","character","App","state","input","inputChangeHandler","event","_this","setState","target","value","deleteCharHandler","index","text","split","splice","newText","join","_this2","this","charList","map","ch","Char_Char","key","onChange","type","Validation","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAoBeA,SAlBI,SAACC,GAChB,IAAIC,EAAU,kCACXD,EAAME,YAAc,EACnBD,EAAU,6BACLD,EAAME,YAAc,KACzBD,EAAU,6BAMd,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGE,MANG,CACVC,MAAO,sBAKeP,MCJfQ,SARF,SAACT,GACV,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOI,QAASV,EAAMW,SACjCR,EAAAC,EAAAC,cAAA,SAAIL,EAAMY,cC0CPC,6MAxCbC,MAAQ,CACNC,MAAO,MAGTC,mBAAqB,SAACC,GACpBC,EAAKC,SAAS,CAACJ,MAAOE,EAAMG,OAAOC,WAGrCC,kBAAoB,SAACC,GACnB,IAAMC,EAAON,EAAKJ,MAAMC,MAAMU,MAAM,IACpCD,EAAKE,OAAOH,EAAO,GACnB,IAAMI,EAAUH,EAAKI,KAAK,IAC1BV,EAAKC,SAAS,CAACJ,MAAOY,6EAIhB,IAAAE,EAAAC,KACAC,EAAWD,KAAKhB,MAAMC,MAAMU,MAAM,IAAIO,IAAI,SAACC,EAAIV,GACnD,OAAOpB,EAAAC,EAAAC,cAAC6B,EAAD,CACLtB,UAAWqB,EACXE,IAAKZ,EACLZ,QAAS,kBAAMkB,EAAKP,kBAAkBC,QAI1C,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACE+B,SAAUN,KAAKd,mBACfqB,KAAK,OACLhB,MAAOS,KAAKhB,MAAMC,QACpBZ,EAAAC,EAAAC,cAAA,SAAIyB,KAAKhB,MAAMC,OACfZ,EAAAC,EAAAC,cAACiC,EAAD,CAAYpC,YAAa4B,KAAKhB,MAAMC,MAAMwB,SAC1CpC,EAAAC,EAAAC,cAAA,wEACC0B,UApCSS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9cb78bd3.chunk.js","sourcesContent":["import React from 'react';\n\nconst validation = (props) => {\n    let message = \"Input text is perfectly fine :)\";\n    if(props.inputLength < 3){\n        message = \"Input text is too short :(\";\n    }else if(props.inputLength > 20){\n        message = \"Input text is too long :(\";\n    }\n    const style = {\n        color: \"rgb(88, 189, 223)\"\n    }\n\n    return(\n        <div className=\"Validation\">\n            <p style={style}>{message}</p>\n        </div>\n    );\n}\n\nexport default validation;","import React from 'react';\nimport './Char.css';\n\nconst char = (props) => {\n    return(\n        <div className=\"Char\" onClick={props.clicked}>\n            <p>{props.character}</p>\n        </div>\n    )\n}\n\nexport default char;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Validation from './Validation/Validation';\nimport Char from './Char/Char';\n\nclass App extends Component{\n\n  state = {\n    input: '',\n  }\n\n  inputChangeHandler = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  deleteCharHandler = (index) => {\n    const text = this.state.input.split('');\n    text.splice(index, 1);\n    const newText = text.join('');\n    this.setState({input: newText});\n  }\n  \n  \n  render(){\n    const charList = this.state.input.split('').map((ch, index) => {\n      return <Char \n        character={ch} \n        key={index}\n        clicked={() => this.deleteCharHandler(index)}\n        />;\n    });\n\n    return (\n      <div className=\"App\">\n        <input \n          onChange={this.inputChangeHandler}\n          type=\"text\"\n          value={this.state.input}/>\n        <p>{this.state.input}</p>\n        <Validation inputLength={this.state.input.length} />\n        <p>Start typing and click any char to remove it from the input</p>\n        {charList}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}